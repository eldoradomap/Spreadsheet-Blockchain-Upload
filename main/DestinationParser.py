import pandas as pd
import json
import time
import os
from openpyxl import load_workbook
from openpyxl.styles import Font, Alignment, PatternFill, Border, Side
from openpyxl.utils import get_column_letter
from web3 import Web3

# Replace these with your details
avalanche_fuji_url = '' # Infura key
original_contract_address = '' # Your smart contract address
contract_address = Web3.to_checksum_address(original_contract_address)
contract_abi = [
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "jsonData",
				"type": "string"
			}
		],
		"name": "addData",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"anonymous": False,
		"inputs": [
			{
				"indexed": False,
				"internalType": "string",
				"name": "jsonData",
				"type": "string"
			}
		],
		"name": "DataAdded",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "data",
		"outputs": [
			{
				"internalType": "string",
				"name": "jsonData",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "index",
				"type": "uint256"
			}
		],
		"name": "getData",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getDataCount",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
]

def fetch_new_data_from_blockchain(last_index):
    try:
        w3 = Web3(Web3.HTTPProvider(avalanche_fuji_url))
        contract = w3.eth.contract(address=contract_address, abi=contract_abi)

        data_count = contract.functions.getDataCount().call()
        new_data = []

        for i in range(last_index, data_count):
            data_json = contract.functions.getData(i).call()
            data = json.loads(data_json)
            new_data.extend(data)

        return new_data, data_count

    except Exception as e:
        print(f"Error fetching data from blockchain: {str(e)}")
        return [], last_index

def create_xlsx_file(data, file_path):
    try:
        if os.path.exists(file_path):
            df = pd.read_excel(file_path)
            new_df = pd.DataFrame(data)
            df = pd.concat([df, new_df], ignore_index=True)
        else:
            df = pd.DataFrame(data)

        df.to_excel(file_path, index=False)
        print(f"File updated/created at {file_path}")

    except Exception as e:
        print(f"Error updating/creating XLSX file: {str(e)}")

# Define a thin border style
thin_border = Border(
    left=Side(style='thin'),
    right=Side(style='thin'),
    top=Side(style='thin'),
    bottom=Side(style='thin')
)

descriptive_headers = [
    "1. Time (Second): timestamp of a day (24 hours)",
    "2. V_grid (V): The voltage of the regular power transmission lines that work as an external electricity source to the microgrid",
    "3. Power_PV (Watt-hour): The amount of electric energy generated by the solar panel",
    "4. Power_load3 (Watt-hour): The amount of electric energy consumed by the house #3"
]

def format_xlsx_file(file_path):
    # Load the workbook and worksheet
    workbook = load_workbook(file_path)
    sheet = workbook.active

    # Set fill color for header and description cells
    fill_color = PatternFill(start_color='D9E1F2', end_color='D9E1F2', fill_type='solid')
    
      # Set the alignment for the first row headers to be left-aligned
    for col in ['A', 'B', 'C', 'D']:
        cell = sheet[f'{col}1']
        cell.alignment = Alignment(horizontal='left')
        cell.font = Font(bold=False)  # Also ensure the font is not bold


    # Apply formatting to description cells and merge them
    for row in range(1, 5):  # Rows 1 to 4 (headers and descriptions)
        sheet.merge_cells(start_row=row, start_column=6, end_row=row, end_column=17)
        cell = sheet[f'F{row}']
        cell.value = descriptive_headers[row - 1]  # Set the value of the cell to the corresponding header
        cell.fill = fill_color
        cell.border = thin_border  # Apply the thin border
        cell.alignment = Alignment(horizontal='left')
        cell.font = Font(bold=False)  # Apply non-bold font style


    # Clear the value in cell E1 if necessary
    if sheet['E1'].value:
        sheet['E1'].value = None

    # Save the changes to the workbook
    workbook.save(file_path)
    print(f"File formatted and saved at {file_path}")

def main():
    last_index = 0

    while True:
        new_data, last_index = fetch_new_data_from_blockchain(last_index)
        if new_data:
            file_path = 'recreated_file.xlsx' # IF NOT CHANGED THE XLSX WILL SAVE TO THE DIRECTORY OF WHERE IT WAS RAN
            create_xlsx_file(new_data, file_path)
            format_xlsx_file(file_path)

if __name__ == "__main__":
    main()

